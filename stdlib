(defun range (a b)
;; Example:
;; (range 1 4) -> (list 1 2 3)
;; (range 4 1) -> (list 4 3 2)
    (if (eq a b)
        nil
        (if (lt a b)
            (cons a (range (+ a 1) b))
            (cons a (range (+ a (- 1)) b)))))

(defun count (coll)
;; Example: (count (list 1 2))
    (if (null? coll)
        0
        (+ 1 (count (tail coll)))))

(defun at-index (i coll)
;; Example: (at-index 1 (list 'a' 'b' 'c'))
    (if (or (null? coll) (lt i 0))
        nil
        (if (eq i 0)
            (first coll)
            (at-index (+ i (- 1)) (tail coll)))))

(defun map (f coll)
    (if (null? coll)
        nil
        (cons
            (f (first coll))
            (map f (tail coll)))))

(defun filter (f coll)
    (if (null? coll)
        nil
        (if (f (first coll))
            (cons
                (first coll)
                (filter f (tail coll)))
            (filter f (tail coll)))))

(defun for-each (f coll)
    (if (null? coll)
        nil
        (begin
            (f (head coll)
            (for-each f (tail coll))))))

(defun fold-left (f seed coll)
;; Example: (fold-left + 0 (range 1 5))
    (if (null? coll)
        seed
        (fold-left
            f
            (f seed (head coll))
            (tail coll))))

(defun fold-right (f seed coll)
;; Example: (fold-right * 1 (range 1 5))
    (if (null? coll)
        seed
        (f
            (fold-right f seed (tail coll))
            (head coll))))

(defun prepend (x coll)
    (cons x coll))

(defun append (x coll)
;; Example: (append 5 (append 4 (append 3 nil)))
    (if (null? coll)
        (list x)
        (cons
            (head coll)
            (append x (tail coll)))))

(defun zip (xs ys)
;; Example:
;; Balanced: (zip (list 1 2 3) (list 'a' 'b' 'c'))
;; Unbalanced: (zip (list 1 2 3) (list 'a' 'b'))
    (if (or ;; short-circuit if unbalanced
            (null? xs)
            (null? ys))
        nil
        (cons
            (list
                (head xs)
                (head ys))
            (zip (tail xs) (tail ys)))))

(defun take (n coll)
;; Example: (take 2 (list 1 2 3))
    (if (or
            (null? coll)
            (lte n 0))
        nil
        (cons
            (head coll)
            (take (+ n (- 1)) (tail coll)))))

(defun skip (n coll)
;; Example: (skip 2 (list 1 2 3))
    (cond
        ((null? coll) nil)
        ((lte n 0) coll)
        ((gt n 0)
            (skip (+ n (- 1)) (tail coll)))))

(defun reverse (coll)
;; Example: (reverse (list 1 2 3))
    (begin
        (defun iter (acc xs)
            (if (null? xs)
                acc
                (iter
                    (cons (head xs) acc)
                    (tail xs))))
        (iter nil coll)))

(defun any (predicate coll)
;; Example: (any (lambda (x) (eq x 0)) (list 1 2 0))
    (if (null? coll)
        #f
        (or
            (predicate (head coll))
            (any predicate (tail coll)))))

(defun all (predicate coll)
;; Example: (all (lambda (x) (gte x 0)) (list 1 2 0))
    (if (null? coll)
        #t
        (and
            (predicate (head coll))
            (all predicate (tail coll)))))

(defun concat (xs ys)
;; Example: (concat (list 1 2) (list 3 4))
    (if (null? xs)
        ys
        (cons
            (head xs)
            (concat (tail xs) ys))))

(defun call (f)
    (f))

(defun max-arity ()
    2147483591)
